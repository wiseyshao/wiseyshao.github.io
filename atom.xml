<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hongyuan&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-12T06:55:45.972Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hongyuan shao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Solved Problems About Phantomjs</title>
    <link href="http://yoursite.com/2017/12/12/Solved-problems-about-phantomjs/"/>
    <id>http://yoursite.com/2017/12/12/Solved-problems-about-phantomjs/</id>
    <published>2017-12-12T04:06:20.000Z</published>
    <updated>2017-12-12T06:55:45.972Z</updated>
    
    <content type="html"><![CDATA[<p>该解决方案已经在Ubuntu中验证成功！</p><p>For me, this was a firewall issue. Phantom requires an open port to connect. If the port is blocked by a firewall, you’ll get <code>WebDriverException(&quot;Can not connect to GhostDriver&quot;)</code>.</p><p>To fix:</p><ol><li>Open a port.</li></ol><p><code>sudo iptables -A INPUT -s 127.0.0.1 -p tcp --dport 65000 -j ACCEPT</code></p><ol><li>Create a PhantomJS driver that uses that port</li></ol><p><code>driver = webdriver.PhantomJS(executable_path=&#39;/usr/local/bin/phantomjs&#39;, port=65000)</code></p><hr><p>但以上解决方法不足以解决Mac出现的问题，即：Cannot connect the service /usr/local/bin/phantomjs.</p><p>那么如何解决呢？</p><p>经过花费近四五个小时的时间进行搜索、尝试、在搜索、再尝试。。。。。，最终确定问题也许并非出在phantomjs上，而是selenium。使用 <code>pip check selenium</code> 查到缺少一个必需的模块 <code>tornado</code>，于是 <code>pip install tornado</code> ,再次尝试，问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该解决方案已经在Ubuntu中验证成功！&lt;/p&gt;
&lt;p&gt;For me, this was a firewall issue. Phantom requires an open port to connect. If the port is blocked by a fire
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pip 使用方法简要</title>
    <link href="http://yoursite.com/2017/11/19/Pip-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E8%A6%81/"/>
    <id>http://yoursite.com/2017/11/19/Pip-使用方法简要/</id>
    <published>2017-11-19T13:38:11.000Z</published>
    <updated>2017-11-19T13:39:55.450Z</updated>
    
    <content type="html"><![CDATA[<p>You can install, upgrade, and remove packages using a program called <strong>pip</strong>. By default <code>pip</code> will install packages from the Python Package Index, <a href="&lt;https://pypi.python.org/pypi">&lt;https://pypi.python.org/pypi</a>&gt;. You can browse the Python Package Index by going to it in your web browser, or you can use <code>pip</code>’s limited search feature:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip search astronomy</div><div class="line">skyfield               - Elegant astronomy for Python</div><div class="line">gary                   - Galactic astronomy and gravitational dynamics.</div><div class="line">novas                  - The United States Naval Observatory NOVAS astronomy library</div><div class="line">astroobs               - Provides astronomy ephemeris to plan telescope observations</div><div class="line">PyAstronomy            - A collection of astronomy related tools for Python.</div><div class="line">...</div></pre></td></tr></table></figure><p><code>pip</code> has a number of subcommands: “search”, “install”, “uninstall”, “freeze”, etc. (Consult the <a href="../installing/index.html#installing-index">Installing Python Modules</a> guide for complete documentation for <code>pip</code>.)</p><p>You can install the latest version of a package by specifying a package’s name:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip install novas</div><div class="line">Collecting novas</div><div class="line">  Downloading novas-3.1.1.3.tar.gz (136kB)</div><div class="line">Installing collected packages: novas</div><div class="line">  Running setup.py install for novas</div><div class="line">Successfully installed novas-3.1.1.3</div></pre></td></tr></table></figure><p>You can also install a specific version of a package by giving the package name followed by <code>==</code> and the version number:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip install requests==2.6.0</div><div class="line">Collecting requests==2.6.0</div><div class="line">  Using cached requests-2.6.0-py2.py3-none-any.whl</div><div class="line">Installing collected packages: requests</div><div class="line">Successfully installed requests-2.6.0</div></pre></td></tr></table></figure><p>If you re-run this command, <code>pip</code> will notice that the requested version is already installed and do nothing. You can supply a different version number to get that version, or you can run <code>pip install --upgrade</code> to upgrade the package to the latest version:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip install --upgrade requests</div><div class="line">Collecting requests</div><div class="line">Installing collected packages: requests</div><div class="line">  Found existing installation: requests 2.6.0</div><div class="line">    Uninstalling requests-2.6.0:</div><div class="line">      Successfully uninstalled requests-2.6.0</div><div class="line">Successfully installed requests-2.7.0</div></pre></td></tr></table></figure><p><code>pip uninstall</code> followed by one or more package names will remove the packages from the virtual environment.</p><p><code>pip show</code> will display information about a particular package:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip show requests</div><div class="line">---</div><div class="line">Metadata-Version: 2.0</div><div class="line">Name: requests</div><div class="line">Version: 2.7.0</div><div class="line">Summary: Python HTTP for Humans.</div><div class="line">Home-page: http://python-requests.org</div><div class="line">Author: Kenneth Reitz</div><div class="line">Author-email: me@kennethreitz.com</div><div class="line">License: Apache 2.0</div><div class="line">Location: /Users/akuchling/envs/tutorial-env/lib/python3.4/site-packages</div><div class="line">Requires:</div></pre></td></tr></table></figure><p><code>pip list</code> will display all of the packages installed in the virtual environment:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip list</div><div class="line">novas (3.1.1.3)</div><div class="line">numpy (1.9.2)</div><div class="line">pip (7.0.3)</div><div class="line">requests (2.7.0)</div><div class="line">setuptools (16.0)</div></pre></td></tr></table></figure><p><code>pip freeze</code> will produce a similar list of the installed packages, but the output uses the format that <code>pip install</code> expects. A common convention is to put this list in a <code>requirements.txt</code> file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip freeze &gt; requirements.txt</div><div class="line">(tutorial-env) $ cat requirements.txt</div><div class="line">novas==3.1.1.3</div><div class="line">numpy==1.9.2</div><div class="line">requests==2.7.0</div></pre></td></tr></table></figure><p>The <code>requirements.txt</code> can then be committed to version control and shipped as part of an application. Users can then install all the necessary packages with <code>install -r</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(tutorial-env) $ pip install -r requirements.txt</div><div class="line">Collecting novas==3.1.1.3 (from -r requirements.txt (line 1))</div><div class="line">  ...</div><div class="line">Collecting numpy==1.9.2 (from -r requirements.txt (line 2))</div><div class="line">  ...</div><div class="line">Collecting requests==2.7.0 (from -r requirements.txt (line 3))</div><div class="line">  ...</div><div class="line">Installing collected packages: novas, numpy, requests</div><div class="line">  Running setup.py install for novas</div><div class="line">Successfully installed novas-3.1.1.3 numpy-1.9.2 requests-2.7.0</div></pre></td></tr></table></figure><p><code>pip</code> has many more options. Consult the <a href="../installing/index.html#installing-index">Installing Python Modules</a> guide for complete documentation for <code>pip</code>. When you’ve written a package and want to make it available on the Python Package Index, consult the <a href="../distributing/index.html#distributing-index">Distributing Python Modules</a> guide.</p><p><a href="https://docs.python.org/3.6/tutorial/venv.html#managing-packages-with-pip" target="_blank" rel="external">From Python Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;You can install, upgrade, and remove packages using a program called &lt;strong&gt;pip&lt;/strong&gt;. By default &lt;code&gt;pip&lt;/code&gt; will install packa
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Creating Virtual Environments</title>
    <link href="http://yoursite.com/2017/11/19/Creating-Virtual-Environments/"/>
    <id>http://yoursite.com/2017/11/19/Creating-Virtual-Environments/</id>
    <published>2017-11-19T13:36:32.000Z</published>
    <updated>2017-11-19T13:40:38.988Z</updated>
    
    <content type="html"><![CDATA[<p>To create a virtual environment, decide upon a directory where you want to place it, and run the <a href="../library/venv.html#module-venv"><code>venv</code></a> module as a script with the directory path:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python3 -m venv tutorial-env</div></pre></td></tr></table></figure><p>This will create the <code>tutorial-env</code> directory if it doesn’t exist, and also create directories inside it containing a copy of the Python interpreter, the standard library, and various supporting files.</p><p>Once you’ve created a virtual environment, you may activate it.</p><p>On Windows, run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tutorial-env\Scripts\activate.bat</div></pre></td></tr></table></figure><p>On Unix or MacOS, run:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source tutorial-env/bin/activate</div></pre></td></tr></table></figure><p>(This script is written for the bash shell. If you use the <strong>csh</strong> or <strong>fish</strong> shells, there are alternate <code>activate.csh</code> and <code>activate.fish</code>scripts you should use instead.)</p><p>Activating the virtual environment will change your shell’s prompt to show what virtual environment you’re using, and modify the environment so that running <code>python</code> will get you that particular version and installation of Python. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ source ~/envs/tutorial-env/bin/activate</div><div class="line">(tutorial-env) $ python</div><div class="line">Python 3.5.1 (default, May  6 2016, 10:59:36)</div><div class="line">  ...</div><div class="line">&gt;&gt;&gt; import sys</div><div class="line">&gt;&gt;&gt; sys.path</div><div class="line">[&apos;&apos;, &apos;/usr/local/lib/python35.zip&apos;, ...,</div><div class="line">&apos;~/envs/tutorial-env/lib/python3.5/site-packages&apos;]</div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p><a href="https://docs.python.org/3.6/tutorial/venv.html#managing-packages-with-pip" target="_blank" rel="external">From Python Tutorial</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;To create a virtual environment, decide upon a directory where you want to place it, and run the &lt;a href=&quot;../library/venv.html#module-ven
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>(私有变量)Private Variables</title>
    <link href="http://yoursite.com/2017/11/18/%E7%A7%81%E6%9C%89%E5%8F%98%E9%87%8F-Private-Variables/"/>
    <id>http://yoursite.com/2017/11/18/私有变量-Private-Variables/</id>
    <published>2017-11-18T07:35:29.000Z</published>
    <updated>2017-11-18T07:40:33.155Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://docs.python.org/3.6/tutorial/classes.html" target="_blank" rel="external">From：Python Tutorial</a></p><p>“Private” instance variables that cannot be accessed except from inside an object don’t exist in Python. However, there is a convention that is followed by most Python code: a name prefixed with an underscore (e.g. <code>_spam</code>) should be treated as a non-public part of the API (whether it is a function, a method or a data member). It should be considered an implementation detail and subject to change without notice.</p><p>Since there is a valid use-case for class-private members (namely to avoid name clashes of names with names defined by subclasses), there is limited support for such a mechanism, called <em>name mangling</em>. Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, as long as it occurs within the definition of a class.</p><p>Name mangling is helpful for letting subclasses override methods without breaking intraclass method calls. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Mapping:</div><div class="line">    def __init__(self, iterable):</div><div class="line">        self.items_list = []</div><div class="line">        self.__update(iterable)</div><div class="line"></div><div class="line">    def update(self, iterable):</div><div class="line">        for item in iterable:</div><div class="line">            self.items_list.append(item)</div><div class="line"></div><div class="line">    __update = update   # private copy of original update() method</div><div class="line"></div><div class="line">class MappingSubclass(Mapping):</div><div class="line"></div><div class="line">    def update(self, keys, values):</div><div class="line">        # provides new signature for update()</div><div class="line">        # but does not break __init__()</div><div class="line">        for item in zip(keys, values):</div><div class="line">            self.items_list.append(item)</div></pre></td></tr></table></figure><p>Note that the mangling rules are designed mostly to avoid accidents; it still is possible to access or modify a variable that is considered private. This can even be useful in special circumstances, such as in the debugger.</p><p>Notice that code passed to <code>exec()</code> or <code>eval()</code> does not consider the classname of the invoking class to be the current class; this is similar to the effect of the <code>global</code> statement, the effect of which is likewise restricted to code that is byte-compiled together. The same restriction applies to <code>getattr()</code>, <code>setattr()</code> and <code>delattr()</code>, as well as when referencing <code>__dict__</code> directly.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3.6/tutorial/classes.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;From：Python Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;“Private” inst
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Guide to Using Super()</title>
    <link href="http://yoursite.com/2017/11/18/guide-to-using-super/"/>
    <id>http://yoursite.com/2017/11/18/guide-to-using-super/</id>
    <published>2017-11-18T06:43:20.000Z</published>
    <updated>2017-11-18T06:45:22.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python’s-super-considered-super"><a href="#Python’s-super-considered-super" class="headerlink" title="Python’s super() considered super!"></a>Python’s super() considered super!</h2><p>If you aren’t wowed by Python’s super() builtin, chances are you don’t really know what it is capable of doing or how to use it effectively.</p><p>Much has been written about super() and much of that writing has been a failure. This article seeks to improve on the situation by:</p><ul><li>providing practical use cases</li><li>giving a clear mental model of how it works</li><li>showing the tradecraft for getting it to work every time</li><li>concrete advice for building classes that use super()</li><li>favoring real examples over abstract ABCD <a href="http://en.wikipedia.org/wiki/Diamond_problem" target="_blank" rel="external">diamond diagrams</a>.</li></ul><p>The examples for this post are available in both <a href="http://code.activestate.com/recipes/577721-how-to-use-super-effectively-python-27-version/" target="_blank" rel="external">Python 2 syntax</a> and <a href="http://code.activestate.com/recipes/577720-how-to-use-super-effectively/" target="_blank" rel="external">Python 3 syntax</a>.</p><p>Using Python 3 syntax, let’s start with a basic use case, a subclass for extending a method from one of the builtin classes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class LoggingDict(dict):</div><div class="line">    def __setitem__(self, key, value):</div><div class="line">        logging.info(&apos;Setting %r to %r&apos; % (key, value))</div><div class="line">        super().__setitem__(key, value)</div></pre></td></tr></table></figure><p>This class has all the same capabilities as its parent, <em>dict</em>, but it extends the <strong>setitem</strong> method to make log entries whenever a key is updated. After making a log entry, the method uses super() to delegate the work for actually updating the dictionary with the key/value pair.</p><p>Before super() was introduced, we would have hardwired the call with <em>dict.<strong>setitem</strong>(self, key, value)</em>. However, super() is better because it is a computed indirect reference.</p><p>One benefit of indirection is that we don’t have to specify the delegate class by name. If you edit the source code to switch the base class to some other mapping, the super() reference will automatically follow. You have a single source of truth:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">class LoggingDict(SomeOtherMapping):            # new base class</div><div class="line">    def __setitem__(self, key, value):</div><div class="line">        logging.info(&apos;Setting %r to %r&apos; % (key, value))</div><div class="line">        super().__setitem__(key, value)         # no change needed</div></pre></td></tr></table></figure><p>In addition to isolating changes, there is another major benefit to computed indirection, one that may not be familiar to people coming from static languages. Since the indirection is computed at runtime, we have the freedom to influence the calculation so that the indirection will point to some other class.</p><p>The calculation depends on both the class where super is called and on the instance’s tree of ancestors. The first component, the class where super is called, is determined by the source code for that class. In our example, super() is called in the <em>LoggingDict.<strong>setitem</strong></em> method. That component is fixed. The second and more interesting component is variable (we can create new subclasses with a rich tree of ancestors).</p><p>Let’s use this to our advantage to construct a logging ordered dictionary without modifying our existing classes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">class LoggingOD(LoggingDict, collections.OrderedDict):</div><div class="line">    pass</div></pre></td></tr></table></figure><p>The ancestor tree for our new class is: <em>LoggingOD</em>,<em> LoggingDict</em>,<em> OrderedDict</em>,<em>dict</em>,<em> object</em>. For our purposes, the important result is that <em>OrderedDict</em> was inserted after <em>LoggingDict</em> and before <em>dict</em>! This means that the super() call in <em>LoggingDict.<strong>setitem</strong></em> now dispatches the key/value update to <em>OrderedDict</em> instead of <em>dict</em>.</p><p>Think about that for a moment. We did not alter the source code for <em>LoggingDict</em>. Instead we built a subclass whose only logic is to compose two existing classes and control their search order.</p><hr><p><strong>Search Order</strong></p><p>What I’ve been calling the search order or ancestor tree is officially known as the Method Resolution Order or MRO. It’s easy to view the MRO by printing the <strong>mro</strong> attribute:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; pprint(LoggingOD.__mro__)</div><div class="line">(&lt;class &apos;__main__.LoggingOD&apos;&gt;,</div><div class="line"> &lt;class &apos;__main__.LoggingDict&apos;&gt;,</div><div class="line"> &lt;class &apos;collections.OrderedDict&apos;&gt;,</div><div class="line"> &lt;class &apos;dict&apos;&gt;,</div><div class="line"> &lt;class &apos;object&apos;&gt;)</div></pre></td></tr></table></figure><p>If our goal is to create a subclass with an MRO to our liking, we need to know how it is calculated. The basics are simple. The sequence includes the class, its base classes, and the base classes of those bases and so on until reaching <em>object</em> which is the root class of all classes. The sequence is ordered so that a class always appears before its parents, and if there are multiple parents, they keep the same order as the tuple of base classes.</p><p>The MRO shown above is the one order that follows from those constraints:</p><ul><li>LoggingOD precedes its parents, LoggingDict and OrderedDict</li><li>LoggingDict precedes OrderedDict because LoggingOD.<strong>bases</strong> is (LoggingDict, OrderedDict)</li><li>LoggingDict precedes its parent which is dict</li><li>OrderedDict precedes its parent which is dict</li><li>dict precedes its parent which is object</li></ul><p>The process of solving those constraints is known as linearization. There are a number of good papers on the subject, but to create subclasses with an MRO to our liking, we only need to know the two constraints: children precede their parents and the order of appearance in <em><strong>bases</strong></em> is respected.</p><hr><p><strong>Practical Advice</strong></p><p>super() is in the business of delegating method calls to some class in the instance’s ancestor tree. For reorderable method calls to work, the classes need to be designed cooperatively. This presents three easily solved practical issues:</p><ul><li>the method being called by super() needs to exist</li><li>the caller and callee need to have a matching argument signature</li><li>and every occurrence of the method needs to use super()</li></ul><p>1) Let’s first look at strategies for getting the caller’s arguments to match the signature of the called method. This is a little more challenging than traditional method calls where the callee is known in advance. With super(), the callee is not known at the time a class is written (because a subclass written later may introduce new classes into the MRO).</p><p>One approach is to stick with a fixed signature using positional arguments. This works well with methods like <strong>setitem</strong> which have a fixed signature of two arguments, a key and a value. This technique is shown in the <em>LoggingDict</em> example where <strong>setitem</strong> has the same signature in both <em>LoggingDict</em> and <em>dict</em>.</p><p>A more flexible approach is to have every method in the ancestor tree cooperatively designed to accept keyword arguments and a keyword-arguments dictionary, to remove any arguments that it needs, and to forward the remaining arguments using **kwds, eventually leaving the dictionary empty for the final call in the chain.</p><p>Each level strips-off the keyword arguments that it needs so that the final empty dict can be sent to a method that expects no arguments at all (for example, <em>object.<strong>init</strong></em> expects zero arguments):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Shape:</div><div class="line">    def __init__(self, shapename, **kwds):</div><div class="line">        self.shapename = shapename</div><div class="line">        super().__init__(**kwds)        </div><div class="line"></div><div class="line">class ColoredShape(Shape):</div><div class="line">    def __init__(self, color, **kwds):</div><div class="line">        self.color = color</div><div class="line">        super().__init__(**kwds)</div><div class="line"></div><div class="line">cs = ColoredShape(color=&apos;red&apos;, shapename=&apos;circle&apos;)</div></pre></td></tr></table></figure><p>2) Having looked at strategies for getting the caller/callee argument patterns to match, let’s now look at how to make sure the target method exists.</p><p>The above example shows the simplest case. We know that <em>object</em> has an <strong>init</strong> method and that <em>object</em> is always the last class in the MRO chain, so any sequence of calls to <em>super().<strong>init</strong></em> is guaranteed to end with a call to <em>object.<strong>init</strong></em> method. In other words, we’re guaranteed that the target of the super() call is guaranteed to exist and won’t fail with an <em>AttributeError</em>.</p><p>For cases where <em>object</em> doesn’t have the method of interest (a draw() method for example), we need to write a root class that is guaranteed to be called before <em>object</em>. The responsibility of the root class is simply to eat the method call without making a forwarding call using super().</p><p><em>Root.draw</em> can also employ <a href="http://en.wikipedia.org/wiki/Defensive_programming" target="_blank" rel="external">defensive programming</a> using an assertion to ensure it isn’t masking some other draw() method later in the chain.  This could happen if a subclass erroneously incorporates a class that has a draw() method but doesn’t inherit from <em>Root</em>.:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">class Root:</div><div class="line">    def draw(self):</div><div class="line">        # the delegation chain stops here</div><div class="line">        assert not hasattr(super(), &apos;draw&apos;)</div><div class="line"></div><div class="line">class Shape(Root):</div><div class="line">    def __init__(self, shapename, **kwds):</div><div class="line">        self.shapename = shapename</div><div class="line">        super().__init__(**kwds)</div><div class="line">    def draw(self):</div><div class="line">        print(&apos;Drawing.  Setting shape to:&apos;, self.shapename)</div><div class="line">        super().draw()</div><div class="line"></div><div class="line">class ColoredShape(Shape):</div><div class="line">    def __init__(self, color, **kwds):</div><div class="line">        self.color = color</div><div class="line">        super().__init__(**kwds)</div><div class="line">    def draw(self):</div><div class="line">        print(&apos;Drawing.  Setting color to:&apos;, self.color)</div><div class="line">        super().draw()</div><div class="line"></div><div class="line">cs = ColoredShape(color=&apos;blue&apos;, shapename=&apos;square&apos;)</div><div class="line">cs.draw()</div></pre></td></tr></table></figure><p>If subclasses want to inject other classes into the MRO, those other classes also need to inherit from <em>Root</em> so that no path for calling draw() can reach <em>object</em> without having been stopped by <em>Root.draw</em>. This should be clearly documented so that someone writing new cooperating classes will know to subclass from <em>Root</em>. This restriction is not much different than Python’s own requirement that all new exceptions must inherit from <em>BaseException</em>.</p><p>3) The techniques shown above assure that super() calls a method that is known to exist and that the signature will be correct; however, we’re still relying on super() being called at each step so that the chain of delegation continues unbroken. This is easy to achieve if we’re designing the classes cooperatively – just add a super() call to every method in the chain.</p><p>The three techniques listed above provide the means to design cooperative classes that can be composed or reordered by subclasses.</p><hr><p><strong>How to Incorporate a Non-cooperative Class</strong></p><p>Occasionally, a subclass may want to use cooperative multiple inheritance techniques with a third-party class that wasn’t designed for it (perhaps its method of interest doesn’t use super() or perhaps the class doesn’t inherit from the root class). This situation is easily remedied by creating an <a href="http://en.wikipedia.org/wiki/Adapter_pattern" target="_blank" rel="external">adapter class</a> that plays by the rules.</p><p>For example, the following <em>Moveable</em> class does not make super() calls, and it has an <strong>init</strong>() signature that is incompatible with <em>object.<strong>init</strong></em>, and it does not inherit from <em>Root</em>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Moveable:</div><div class="line">    def __init__(self, x, y):</div><div class="line">        self.x = x</div><div class="line">        self.y = y</div><div class="line">    def draw(self):</div><div class="line">        print(&apos;Drawing at position:&apos;, self.x, self.y)</div></pre></td></tr></table></figure><p>If we want to use this class with our cooperatively designed <em>ColoredShape</em>hierarchy, we need to make an adapter with the requisite super() calls:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class MoveableAdapter(Root):</div><div class="line">    def __init__(self, x, y, **kwds):</div><div class="line">        self.movable = Moveable(x, y)</div><div class="line">        super().__init__(**kwds)</div><div class="line">    def draw(self):</div><div class="line">        self.movable.draw()</div><div class="line">        super().draw()</div><div class="line"></div><div class="line">class MovableColoredShape(ColoredShape, MoveableAdapter):</div><div class="line">    pass</div><div class="line"></div><div class="line">MovableColoredShape(color=&apos;red&apos;, shapename=&apos;triangle&apos;,</div><div class="line">                    x=10, y=20).draw()</div></pre></td></tr></table></figure><hr><p><strong>Complete Example – Just for Fun</strong></p><p>In Python 2.7 and 3.2, the collections module has both a <em>Counter</em> class and an <em>OrderedDict</em> class. Those classes are easily composed to make an <em>OrderedCounter</em>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">from collections import Counter, OrderedDict</div><div class="line"></div><div class="line">class OrderedCounter(Counter, OrderedDict):</div><div class="line">     &apos;Counter that remembers the order elements are first seen&apos;</div><div class="line">     def __repr__(self):</div><div class="line">         return &apos;%s(%r)&apos; % (self.__class__.__name__,</div><div class="line">                            OrderedDict(self))</div><div class="line">     def __reduce__(self):</div><div class="line">         return self.__class__, (OrderedDict(self),)</div><div class="line"></div><div class="line">oc = OrderedCounter(&apos;abracadabra&apos;)</div></pre></td></tr></table></figure><hr><p><strong>Notes and References</strong></p><p><strong>*</strong> When subclassing a builtin such as dict(), it is often necessary to override or extend multiple methods at a time. In the above examples, the <strong>setitem</strong> extension isn’t used by other methods such as <em>dict.update</em>, so it may be necessary to extend those also. This requirement isn’t unique to super(); rather, it arises whenever builtins are subclassed.</p><p><strong>*</strong> If a class relies on one parent class preceding another (for example, <em>LoggingOD</em> depends on <em>LoggingDict</em> coming before <em>OrderedDict</em> which comes before <em>dict</em>), it is easy to add assertions to validate and document the intended method resolution order:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">position = LoggingOD.__mro__.index</div><div class="line">assert position(LoggingDict) &lt; position(OrderedDict)</div><div class="line">assert position(OrderedDict) &lt; position(dict)</div></pre></td></tr></table></figure><p><strong>*</strong> Good write-ups for linearization algorithms can be found at <a href="http://www.python.org/download/releases/2.3/mro/" target="_blank" rel="external">Python MRO documentation</a> and at <a href="http://en.wikipedia.org/wiki/C3_linearization" target="_blank" rel="external">Wikipedia entry for C3 Linearization</a>.</p><p><strong>*</strong> The <a href="http://en.wikipedia.org/wiki/Dylan_(programming_language" target="_blank" rel="external">Dylan programming language</a>) has a <em>next-method</em> construct that works like Python’s super(). See <a href="http://www.opendylan.org/books/dpg/db_347.html" target="_blank" rel="external">Dylan’s class docs</a> for a brief write-up of how it behaves.</p><p><strong>*</strong> The Python 3 version of super() is used in this post. The full working source code can be found at:  <a href="http://code.activestate.com/recipes/577720-how-to-use-super-effectively/" target="_blank" rel="external">Recipe 577720</a>. The Python 2 syntax differs in that the <em>type</em> and <em>object</em> arguments to super() are explicit rather than implicit. Also, the Python 2 version of super() only works with new-style classes (those that explicitly inherit from <em>object</em> or other builtin type). The full working source code using Python 2 syntax is at <a href="http://code.activestate.com/recipes/577721-how-to-use-super-effectively-python-27-version/" target="_blank" rel="external">Recipe 577721</a>.</p><p><a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" target="_blank" rel="external"><strong>原文链接</strong></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Python’s-super-considered-super&quot;&gt;&lt;a href=&quot;#Python’s-super-considered-super&quot; class=&quot;headerlink&quot; title=&quot;Python’s super() considered su
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>感伤而活</title>
    <link href="http://yoursite.com/2017/11/12/%E6%84%9F%E4%BC%A4%E8%80%8C%E6%B4%BB/"/>
    <id>http://yoursite.com/2017/11/12/感伤而活/</id>
    <published>2017-11-12T05:09:32.000Z</published>
    <updated>2017-11-12T05:32:22.939Z</updated>
    
    <content type="html"><![CDATA[<p>再次看过周星驰的《大话西游之大圣娶亲》，让人感伤。一个对于男人如此死心塌地的女人，不知道在这样的世界里是否真的存在和存在过，这样的女人只在电视上面见到。《温州一家人》里面的王翠花和她的女儿周阿雨，《大话西游之大圣娶亲》里面的紫霞，如果再算上一个，则是《一生只爱你》当中的石小青。这些女人中都有一个共同的特点，不是忠诚，不是愚蠢，也不是简简单单的善良，而是在她们的眼中，一个人一生需要的其实很少很少，只凭着自己的努力也能过一辈子。她们知道生活其实是很艰难的，一切的幸福是靠自己的辛苦和努力一点一滴换来的，她们认定了一件事情，就会坚定地做下去，不争不抢，不依不靠。她们有这样的信念：<strong>自己的幸福只能靠自己的努力才能得到</strong>。同时，她们能够明白所有人的苦，避免与人冲突，不违抗亿万年进化得来的那种所有动物都有的本能，她们认定了一个男人，就会一直努力下去，她们不会总想着依靠他，在她们的观念里，该来的总会来，该走的总会走，都是强求不得的。所以，当她们决定了与一个男人过一辈子，她们会千方百计地去为对方着想，去为对方做事情，去帮助对方，作为普普通通的人，她们也会有希望有人来爱护自己、照顾自己、安慰自己的想法，然而她们知道，这样的想法只是这样的想法，自己不会抛弃自己的已有而去追求别的东西。她们有责任感，她们努力，她们坚强，她们吃苦耐劳，她们很少抱怨，从来不会因为别人没有为她做什么而怨恨，即使心里面有了怨恨，她们也会把它消解掉，然后吞下去咽到肚子里。这些女人为人真诚，懂得体谅身边的所有人，她们热爱生活，爱身边的每一个人，即使生活伤害了她们，即使身边的人伤害了她们。她们也许在一些时间里会很生气，但是她们是讲道理的人，她们会给自己讲道理，她们用那种男人所没有的关怀和包容之心将气愤化解，因为她们最终懂得这样的事情，生活很艰难，每个人其实都身不由己，没有人是圣贤，人总是很狭隘的，包括她们自己，所以人总会不知不觉地伤害到其他人，所谓的气愤不值得刻在心里，就把它当作一阵风，吹过了之后就会平静下来，最要紧的不是让自己像一个不懂事的小孩子伤心哭闹，而是自己来开导自己，给自己讲道理。只有做到了这些，一个人才能够做到这样子对待身边的人。</p><p>事实上，一个人怎么对待自己，就会怎么对待身边的人，这里说的对待，不是在感情上，不是在自我的需求上，而是在一个更高的层级之上，可以说是信念，可以说是理想，可以说是责任，可以说是担当，总之，是一种很多人觉得很虚的东西，事实上，也正是这种很虚的东西无形之中支撑和指导着每一个人的生活。中华文明五千年，一直延续到今天，中国人所固有的内在气质其实与世界上所有的民族一样，都是独特的。那么是什么造成了彼此之间的独特？我想也许就是这种看似很虚的东西，它们是一种精神，一种文化，一种信念，一种信仰，一种自远古时代传承至今的理想。还记得周星驰在《喜剧之王》中的一个片段说过：一个人如果没有理想，那跟咸鱼有什么两样！这也是再一次看到《大圣娶亲》中再次感动的地方。大圣在经历人世间的种种痛苦之后，最终体会到人世间的种种苦难，而这也是所有人正在经受的考验，为了化解这样的人间无形之苦难，大圣舍弃了人世间的情感，追随唐三藏到西天取经，来以此造福人们，而这也是大圣与生俱来就注定的使命，最终，在困难中大圣接受了它，让它化作不可磨灭的理想，由此决绝地走在了去西天取经的路上。</p><p>然而，大圣所舍弃的人世间的情感，并非因为无情，那份情感还留存在他的心底里面甚至刻地更深，在他转头看着城头上的夕阳武士和像紫霞一样的女人时，在他心里面所泛起的波澜，难以想象，这需要多么坚定的理想和信念才能支持他扭过头转过身朝西天的方向走去。</p><p>再次看了这部电影，不禁开始想，究竟什么样的人才能够排出这样具有深度却又极为委婉的电影？在看似无厘头之下掩藏了太多太多对人之苦难的叹息与感伤。一个人想要什么，需要什么，在很多时候并不是他所自以为的那样，而人与人之间的诉求和冲突让很多本应简单的事情变得交错复杂，最终变得失控，而往往这样的场景来自于人的贪婪。比如牛魔王纳妾，比如铁扇公主幽会大圣，等等，他们的贪心与其他人的普通诉求之间开始冲撞摩擦，由此导致悲剧一步步升级，最终化为了所有人的灾难。而这种灾难的发生，其实仅仅是一个人心里面那种看似简单实则无法自我压制的想法和欲求。由此想到了那些抢劫、强奸、偷盗，以及一个公司里面的人事争斗，本质上都是相同的。换句话说，如果一个人的欲求打破了所在生态圈的原有平衡，那么事情就开始变得混乱，进一步从前的“好人”也开始做一些不好的事情，这也就说明为什么在上学时候的乖乖女进入了工作几年之后，人就变了。还有那个杨大哥，读了两年的研究生不知道中间遭遇了什么样的经历，看人的眼神现在也不免让人心里开始打冷颤。</p><p>那么，一个人究竟怎么做才能避免这些悲剧的发生？或许就是那种很多成年人们所不愿意提起的理想以及与之相似的那些看似很虚的东西。当理想化作为一种信念，当信念化作为一种使命，当使命化作为一种担当的时候，人或许才能真正明白，你所遭受的一切苦难是注定的，是需要你勇敢承担的，它们就是你生命的一部分，即使如此，你也要坚强，也要勇敢，更要坚守信念，坚定决心，鼓足勇气往前走。而这里所谈的到理想，不是为了追求某件东西某个人某些事，它应该是那种至虚的存在，那种为了他人而寻求的自我存在。就像毛主席的信念：为人民服务；就像习近平的信念：让所有的老百姓生活越来越幸福；等等。由此来看，一个人的理想不应该是由内而外的，而应该是由外而内的。也就是说你的付出是要为了外在的那些东西，让这种追求化作为内在的动力。人之意义，或许就是要为这个世界带来一些好的东西，创造一些好的事物。人，终将逝去，试想当你离开之时，你存在的意义是什么呢？或许最终你可能这样想，终究，这是你的世界，属于你自己的世界，你不在了，与你而言它们也就不在了。毁灭它还是造福它，这是一个需要好好思量的问题。</p><p>然而，这个问题有一些伤感，但正是因为伤感，它才显得很美很奇妙。在开头说，人要伤感地活着，因为一个人只有真正明白生之苦难才开变得伤感，由伤感变得深沉，由深沉变得智慧，由智慧转变为一种精神，那种只为他人只为减少人们生之困难的精神。释迦摩尼、圣雄甘地、耶稣，这些人值得每一个人敬仰，敬仰他们的智慧，更敬仰他们的精神。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;再次看过周星驰的《大话西游之大圣娶亲》，让人感伤。一个对于男人如此死心塌地的女人，不知道在这样的世界里是否真的存在和存在过，这样的女人只在电视上面见到。《温州一家人》里面的王翠花和她的女儿周阿雨，《大话西游之大圣娶亲》里面的紫霞，如果再算上一个，则是《一生只爱你》当中的石小
      
    
    </summary>
    
    
      <category term="感悟" scheme="http://yoursite.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>2017-11-7</title>
    <link href="http://yoursite.com/2017/11/07/2017-11-7/"/>
    <id>http://yoursite.com/2017/11/07/2017-11-7/</id>
    <published>2017-11-06T18:08:41.000Z</published>
    <updated>2017-11-06T18:24:59.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活体察记录："><a href="#生活体察记录：" class="headerlink" title="生活体察记录："></a>生活体察记录：</h2><h4 id="做一个认真经营的人"><a href="#做一个认真经营的人" class="headerlink" title="做一个认真经营的人"></a>做一个认真经营的人</h4><p>这是从支付宝客户端看到的一个软文的标题，上面说：一个认真经营自己的人，值得拥有这样的服务。这篇文章我没有看，但是它的标题却深深震撼了我？不禁扪心自问：我是否是一个认真经营自己的人。很惭愧，我的回答是——不是。直到现在为止，我仍然算不是上一个认真经营自己的人，尽管一直有这样的心，但力却并没有用到点子上。回望过去的种种，自己有心真正努力过的也就是高中的两次成功的经历：一次是第二次高一上学期，另一次是高四。这两次的努力很有成效，也取得了很显著的变化。因为这两次的努力都放在了点子上，尤其是高四的一年，找到了学习的窍门，即知识要系统化，尤其是在第一次高考的惨败之后学习数学的过程中，自己在学校开学之前拿着学校在高三印发的数学资料，也就是高三的数学，在连续时间内系统性的认认真真地看了一遍，在开学后考试的时候，连续两次，成绩都极为惊人，甚至有一次差点考了满分（错了一个填空题好像）！而印象中在复习的过程中基本上没有做实际的题目，看的都是上面的内容，包括概念、概念的解释以及上面的例题，只对其中的部分不是很懂的地方动手算了算，也就是自己感觉是薄弱环节的地方认真动手算了算，由此下来，这方面的内容这段时间内系统性的掌握了。但是，由于这个学习的方法没有继续沿用，也是因为当初并没有意识到这种系统性的看课本是一个极好的学习方法，导致在后续的高丝学习中数学的功力逐渐下降，最后维持在一百二到一百三之间。也就是说，从一个数学的顶级高手降级为了中高级选手。还有一次的努力是在高二，由于高一下学期玩电脑游戏导致成绩大幅下滑，在高二开学前自己就把游戏瘾断绝掉，并不再接触任何电脑相关的东西，把QQ号码也送了人，到了高二，自己在家走读，没有住校，每天都很努力很努力，晚上睡的很晚，定好闹钟早上三四点就做起来学习，很努力，然而方式却不对，最终导致白天精神不济，也就是从那时候，自己首先开始尝试靠喝茶，喝浓茶来解困，之后又开始用咖啡来解困，然而最红都没有什么用处，因为本质的方式没有改变，自己当时在做的是通过外界的事物来维系当下的运作方式，而正是这种错误的运作方式导致了更为严重的问题，自己当初要起早熬夜的初衷是为了弥补大一下学期落下的课、欠下的债，然而，这种方式是极为不可采取的，因为这种方式太过于直接、太过于粗暴、太过于莽撞。在一个知识比拼的赛道上，要拼的不是体力和精力，而是智力。也就是说自己其实应该做的是在通过智力来合理掉配精力和体力，而不是通过精力喝体力来掉配智力，南辕北辙，最终导致的是成绩平平，没有亮点。这种不考智力取胜而是通过常规的做法想要获胜的机率在这样的社会里很小很小，因为常规的防范人人都会用，都在用这个社会多的最多的就是人，所以不缺比你拼的，这是社会最缺什么人？最缺的就是即拼智力也拼体力、精力的人，只有这种人才最有可能取得瞩目成就，仅仅靠拼智力耍小聪明，最终坑害的只能是把自己推入意淫的黑洞。</p><p>由此，得出的两个结论：第一，最为高效的学习是自主学习；第二，学习要持续性、系统性、完整性、针对性地进行；第三，学习是有方法的，好的方法可以事半功倍；第四，要有信心，不是所谓的肤浅的自信，而是一种使命感，一种无可逃避的使命的承担，没有任何理由退缩的承担，也就是自己现在所说的信念和决心；第五，需要足够地专，不能像散弹枪一样，打出去的子弹多但却没有力量缺少命中率，而应该像狙击步枪，既有力量命中率也高；第六，万事只能靠自己，尤其是在危难时刻，在命运生死攸关的时候，所以要养成自力更生的好习惯；第七，世上没有娱乐，所有的娱乐本质上都是自我堕落，而很多人正是因为别人的堕落而成就了自身的崛起，这两种人，你都不能做，你在做一个好人的同时，要让自己经营成为一个极具社会价值和人文价值的人；第八，也是最后一点，好钢要用在刀刃上，不要耍三脚猫的功夫，不要自作聪明，不要表现的让别人觉得你很聪明或者很精明，智慧是用来创造价值的，而不是为了用来炫耀或者给自己挖坑的，再次，好钢要永远用在刀刃上。所以，由此来看，你需要明白你现在最重要的事情是什么，你需要专注于什么，哪些是完全没有必要做的。另外，尤其是你的思想，你所想的事情，要控制好，永永远远不要让它们触及负面的东西，因为那些是撒旦的化身，它们会击垮你。不要想任何的烂人烂事，无论家里的烂事、你爹妈的为人，还是外面的乱七八糟的事情。先要把需要你关注和解决的事情想办法解决好了，这些是你最应该做的事情。</p><p>那些烂人烂事，让它们见鬼去吧，不要想它们，不要想它们，不要想它们。没有任何理由，没有任何借口，就是不要想，不要找任何理由，也不要找任何借口，与你无关的人和事，你管不了的人和事，都只需要你表示关心就可以，不要花费任何的心思和精力在上面，更重要的是，不能动气，不能动气，不能动气，不能动气，永远不能动气，即使像你妈那样的人，不去搭理她，她说什么你就嗯嗯嗯嗯嗯嗯就好，对于你爹，你就听就行，不要反对他，不要反对任何人，不要反对任何人，不要反对任何人，永远不要。不要意气用事，不要动怒，不要戾气，要平和、要和气、要静心、要定气、要低调、要从容、要淡定，对于无关紧要的事情要妥协。什么是无关紧要的事情？就是那些与你在做的最重要的事情没有直接关联的事情都是无关紧要的事情。</p><p>对了，今天早上整整一个早上的时间来购物，选了三件衣服：两件保暖内衣（同款不同色），一件跑步长裤。都是在网易考拉工厂店买的。让自己纠结时间最长的有两件东西，一个是跑步长裤，纠结了很久，看了很久，对比了很久最终买下。而还有一件跑步长袖，Nike的，纠结、对比的时间更长更久，最终还是因为价格的原因没有买，还能够感受到直到现在自己仍然是不甘心，一定要买到它的那种心气在心底缓缓地游荡，深沉有力。如果用 python做项目的心气能够比得上这个心气就不能再好了。买这些东西，目的性很强，一个是冬天的保暖，自己怕冷，很怕冷，尤其是长时间静静的坐在屋子面的凳子时，尤其是在没有带暖气的家里。跑步长裤和跑步长袖是用来在冬季的户外锻炼用，棉质的衣服不适合在冬天训练使用。哎，说着说着跑题了。说这些，其实因为很简单，购物这种很简单的事情不该用这么长时间来纠结，尽管只是偶尔，花的时间确实有些长。归根到底，还是因为兜里没钱，尽管不愿意这么说自己。对于喜欢的东西舍不得买，其实是一种悲哀，尤其是日常要用的东西，更别提室内的跑步机（自己计划将来用它来在室内散步使用）。很悲哀，很悲哀，很悲哀。</p><p>另外，今天帮小吴的天猫店刷单，能够感受到那种生活的不易和辛苦，自己不愿意承受那种辛苦，这正是当初铁了心要考大学读研究生的初心，然而读了大学之后随着家里面人态度的极大转变，自己像是掉入到了一个温柔的陷阱，失去了往常拼搏的强劲动力，是有心无力岁月蹉跎的景象，没有确定的目标，没有确定的方向，喜欢就去做，不喜欢就尽量不做，自以为是，好高骛远，同时又自卑情结严重，包括家庭出身、年龄、学历（二本而不是211、985等等），相互之间交缠混杂，同时家里面永远是那种想要马儿跑又不想让马儿吃草的那种想法，想要享儿子将来的福，却又尽可能的不去付出，就像伙食费，永远都是要了给不要了不给，去要吧他爹还总是再三嘱咐不要乱花，有钱也装作没钱，没钱就装作更没钱。这样的家庭，这样的爹妈，无疑是永远扶不起的阿斗，要不自己在初中的那个最后一个班主任老太太总说自己是扶不起的阿斗？有其父必有其子说的其实蛮有道理，这里面说的不是外在的成就，而是内在的一种精神气质。所谓龙生龙凤生凤老鼠生来会打动，所谓龙生一子定乾坤猪生一窝拱墙根，都说的不错。怪不得人们说物以类聚人以群分，一方面揭示出近朱者赤近墨者黑的道理，另一方面也揭示出人们会追求与他们的精神气质相投的方向，而逃离与自己精神气质不同的方向。所以，这也是自己想要赶快逃离这里永远不再回来的初衷。而想到那些经常与家里人通电话的那些人，要不就是寂寞空虚，要不就是闲来无聊，要么就是觉得无依无靠，等等都是不坚强之类的人，而并不是他们本身多么孝顺多么恋家，而是感到在外面受了苦而感到了现实的寒冷，进而想要有所依靠，想要相互依靠。所有的这些都没有错，都是人的本能的情怀。</p><p>人，要快乐起来很难，需要付出相应的代价。最重要的是，不是要即时享乐，而是要学会为自己留有空间和余地，学会通过自己的努力让周围的可爱的人们也能够体验到快乐。快乐，其实就像挣钱，因为创造了价值，所以才有了钱，钱是你自我价值的一个社会衡量。它是一个衡量的标准，也是其他人衡量短期内你的价值的标准，钱不是用来拿来享乐用的，更不是用来消遣用的，钱是用来拿来创造更多更大的价值用的。所以，如果钱不能够保证你创造更大的价值，就让它们存在那里，在需要它们的时候再用。幸福和快乐也是一样，如果他们不能穿造出价值，为什么要用它们呢？殊不知很多人因为你在享受幸福的时候他们却受了伤，什么是狗粮？什么事光棍？如果你的幸福和快乐不能够让身边的人与你同快乐，那么这种快乐和幸福是没有意义的，甚至是副作用的。那些喜欢炫耀的人，那些喜欢吹嘘的人，那些虚荣的人，最终伤害了别人又害了自己的悲剧发生的太多太多。</p><p>最后，我要问自己，自己，到底什么才是价值？？？什么才是价值？什么是你的个人价值，什么是你的社会价值？什么是价值？现在这个答案似乎开始有眉目了。价值，就是你为人们创造出来了有用的东西，不是为自己，而是你造福了别人，这就是价值，让身边的人受到了方便、被启示、被感动、指明了他们的方向、感到了幸福和欢乐，等等，这是价值。还记得学习初中的《社会》时上面说的小农自然经济吗？那种自给自足的经济。这种只为了自己不为其他人的做法最终只会裹住自己的手脚。要实现你的价值，要扩大你的价值，要弘扬你的价值。你要做到戒骄戒躁、不气不馁、稳固厚重、平易近人、平心静气、淡定沉着，要做到这些也难也不难，关键就在于你想与不想。</p><h4 id="关于Coursera北大的C语言课程"><a href="#关于Coursera北大的C语言课程" class="headerlink" title="关于Coursera北大的C语言课程"></a>关于Coursera北大的C语言课程</h4><p>北大的C语言课程，就像知乎中某位女性朋友介绍的那样，很优秀的课程，仅仅只看了这个大系列课程中的八分之一不到，自己就已经觉得是获益匪浅，对计算机的内在机理，尤其是目前对内存的存储方面，也就是存储数据的方式方面，有了更为透彻的了解，对于过去在学习Python过程中的种种疑惑变的豁然开朗。因为，这是一个非常值得学习的课程，名师讲授，如庖丁解牛，极为精细而且有趣。自己在佩服之余更多的是敬佩和感激。李戈老师说这门课程是要培养计算机专家，是能够设计新的编程语言的人，而不是简简单单的编程人员。这种高起点、高标准、高投入、高公益的作品，唯一需要自己做的就是成为这个课程所初衷的那样的人，成为一个专家级人物，不是为自己，而是回了回报这个美妙的社会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;生活体察记录：&quot;&gt;&lt;a href=&quot;#生活体察记录：&quot; class=&quot;headerlink&quot; title=&quot;生活体察记录：&quot;&gt;&lt;/a&gt;生活体察记录：&lt;/h2&gt;&lt;h4 id=&quot;做一个认真经营的人&quot;&gt;&lt;a href=&quot;#做一个认真经营的人&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="生活体察记录" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E4%BD%93%E5%AF%9F%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>A Little Thought About Learning Python</title>
    <link href="http://yoursite.com/2017/10/09/A-little-thought-about-learning-Python/"/>
    <id>http://yoursite.com/2017/10/09/A-little-thought-about-learning-Python/</id>
    <published>2017-10-09T02:58:45.000Z</published>
    <updated>2017-10-09T03:00:53.203Z</updated>
    
    <content type="html"><![CDATA[<p>自学 Python 已经一年有余，中间有些断续，一直以来如果是跟着 Coursera 上面走或者跟着教 Python 的 English Books 走的话，会跟着上面的练习题编写小程序。如果没有练习题的话就不回去动手找些东西来弄。不是没有想过自己找个生活中的东西来弄，而是一想到现在学的还都是皮毛，变不了这些东西，所以想法一直在脑袋里面盘旋，没有落实。其实，原因有很多，比如编写程序时各种的拼写错误，打字的节奏，容易出现语法的错误等等，这些也是不愿意动手的原因，本质上，是因为对于命令行之类的东西还是不甚熟悉，所以有些畏惧不愿尝试。而前些日子较为系统地学习了 Linux 的常用命令和示例，现在对命令行这种东西又了更大的兴趣，也开始对之熟悉起来，如今在 Mac 上面进行很多操作，比如查找文件，打开文件时，开始用 terminal 操作，感觉确实很不错，尤其是在批量查找、删除某类型的文件时，用 command line 显得尤为方便和快速，command line 能够实现的高级搜索、删除、新建、重命名等操作如果用 Graphic Interface 的话要不就是很难实现或者极为不方便，操作的手法即笨拙又漫长。</p><p>所以，今后操作 Mac 与 Linux 的相关操作要尽可能的用 command line 来实现，这也是一个合格的程序员需要具备的最基本的要求，这也说明了为什么大多数企业招聘 programmer 往往要求具有一定的 Linux 基础的原因。如果对 command line 不熟悉，那么将会极大的影响编程效率。事实上 command line 也可以算作是编程语言的一个分支，就像 regular expression 一样，都极为通用，一旦对 command line 的各种操作变的特别熟悉之后，那么对于进阶其他的快捷键、各种 programmer 常用的软件，比如 Atom、Sublime、Typora、Markdown句法等等就如同信手拈来，像 Mac 的 terminal 与 Windows 的 cmd 等更不在话下。所以，对于 command line 需要彻底掌握，command line、regular expression、anyone programing language、database，只要精通前三者、最后一个，那么一个 programmer 应该算得上是一个高手了吧？</p><p>所以，接下来，对于 command line 和 regular expression 需要放在一起学，另外 regular expression 除了需要与 command line 放在一起学，还需要与 programming language 放在一起来学，尤其是对于文字、符号的处理会变的几位高效。而 database 则需要与 language 放在一起来练习。用 language 处理后的数据需要进行系统的存储，这样可以方便后续的查找和使用，如果仅仅把它们零碎的放在各个文件里面，会显得极为不方面。就像昨天编写的那个用户平台登陆程序一样，如果能够把相关的数据存入 database ，会是一个极好的选择，当然，这个程序如果存储数据不多，也可以把它们简单的放在文件里面。限免贴上昨天编写的很简单的一个小程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line"><span class="string">Created on Sun Oct  8 16:26:47 2017</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">@author: larrybrin</span></div><div class="line"><span class="string">"""</span></div><div class="line"></div><div class="line">name_dict = []</div><div class="line">passwd_dict = []</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">newusers</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> name_dict, passwd_dict</div><div class="line">    name = input(<span class="string">'Please input the name you choose: '</span>)</div><div class="line">    <span class="keyword">while</span> name <span class="keyword">in</span> name_dict:</div><div class="line">        input(<span class="string">'The name has been taken by others, input another one: '</span>)</div><div class="line">    passwd = input(<span class="string">'Set your passsword: '</span>)</div><div class="line">    name_dict.append(name)</div><div class="line">    passwd_dict.append(passwd)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">oldusers</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">global</span> name_dict, passwd_dict</div><div class="line">    name = input(<span class="string">'Please input your username:'</span>)</div><div class="line">    passwd = input(<span class="string">'Please input your passsword: '</span>)</div><div class="line">    <span class="keyword">while</span> name <span class="keyword">not</span> <span class="keyword">in</span> name_dict <span class="keyword">or</span> passwd <span class="keyword">not</span> <span class="keyword">in</span> passwd_dict:</div><div class="line">        print(<span class="string">'login incorrect: '</span>)</div><div class="line">        name = input(<span class="string">'Please input your username:'</span>)</div><div class="line">        passwd = input(<span class="string">'Please input your passsword: '</span>)</div><div class="line">    print(name, <span class="string">'welcome back '</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></div><div class="line">    inputs = <span class="keyword">True</span></div><div class="line">    options = <span class="string">"""</span></div><div class="line"><span class="string">            (N)ew User Login</span></div><div class="line"><span class="string">            (O)ld User Login</span></div><div class="line"><span class="string">            (E)xit</span></div><div class="line"><span class="string">            """</span></div><div class="line">    print(options)</div><div class="line">    <span class="keyword">while</span> inputs:</div><div class="line">        option = input(<span class="string">'Choose one character in the parenthesis: '</span>)</div><div class="line">        <span class="keyword">try</span>:</div><div class="line">            <span class="keyword">if</span> option == <span class="string">'N'</span>:</div><div class="line">                inputs = <span class="keyword">False</span></div><div class="line">                newusers()</div><div class="line">            <span class="keyword">elif</span> option == <span class="string">'O'</span>:</div><div class="line">                inputs = <span class="keyword">False</span></div><div class="line">                oldusers()</div><div class="line">            <span class="keyword">elif</span> option == <span class="string">'E'</span>:</div><div class="line">                inputs = <span class="keyword">False</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">except</span>:</div><div class="line">            print(<span class="string">'Your input is illegal, try again!'</span>)   </div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    login()</div></pre></td></tr></table></figure><p>这个程序存在很多漏洞，最大的漏洞有两个：一个是用户信息不能存储，另一个是用户如果选择 olduser 登陆，如果他的信息本身未曾录入到系统数据的话， 那么他在输入时就会变的无限循环，一直提醒重新输入用户名和密码，而不能跳入到新用户的注册进程中。换句话说，这个小程序还有很大的完善空间。</p><p>另外，红远需要注意的是，你的 python 语言基本框架已经搭建完毕，接下来的主要工作是放在用上，需要自己动手想一些需要用编程解决的问题，然后用 python 来解决，如果遇到某个难点，可以进行搜索查找，今后深化 Python  的不能再是拿着一本书从头啃到位，这样做速度既慢而且收效不大。因为现在 Python 的学习基本框架已经搭建完毕，剩下的则是对其进行修修补补。目前最需要解决的问题是，使用 python 解决能够解决的各种问题，一次来达到对 python 语言的进一步熟悉，直至掌握。而现在你对其中的一些基本的 function 和 method 还不甚掌握，唯一能够解决这个问题的途径就是不断地练习，哪里弱，就练习哪里。除此之外，你应该开始着手搭建 database 的框架，理解 Python 第三方库的基本用途，这些是完善 Python 框架的必要工作。</p><p>而现在，除去与编程直接相关的事务，就是与工作相关的事物，要开始写简历啦！尽管不知从何着手，但这件事情不能再拖下去，要把握好时机。</p><p>哦，对了，git 相关的基本操作也需要掌握好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自学 Python 已经一年有余，中间有些断续，一直以来如果是跟着 Coursera 上面走或者跟着教 Python 的 English Books 走的话，会跟着上面的练习题编写小程序。如果没有练习题的话就不回去动手找些东西来弄。不是没有想过自己找个生活中的东西来弄，而是
      
    
    </summary>
    
    
      <category term="生活体察记录, Python" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E4%BD%93%E5%AF%9F%E8%AE%B0%E5%BD%95-Python/"/>
    
  </entry>
  
  <entry>
    <title>2017-10-8</title>
    <link href="http://yoursite.com/2017/10/08/2017-10-8/"/>
    <id>http://yoursite.com/2017/10/08/2017-10-8/</id>
    <published>2017-10-08T14:48:09.000Z</published>
    <updated>2017-10-08T14:49:04.001Z</updated>
    
    <content type="html"><![CDATA[<h4 id="人长大的两个思想转变特点："><a href="#人长大的两个思想转变特点：" class="headerlink" title="人长大的两个思想转变特点："></a>人长大的两个思想转变特点：</h4><p>开始把过去视之为玩具的东西作为工具来对待。</p><p>做事情的参考不再是喜欢不喜欢，而是需要不需要。而这时其实一个人会逐渐明白，其实没有所谓的喜欢和不喜欢，两者之间事实上没有本质的界限，只不过是人们为了逃避某些东西而产生的对比情绪，本质上其实是自欺欺人而已，可悲的是，很多人直到老去都没想清楚这个道理。真正有意义的参考选择是你是否这样或者那样的需要，而是否有需要的唯一判断根据是，如果你得到或者达到了，对你是否有直接的显著助益。</p><hr><p>已经有两三没有做文字记录，也许是前两天写的有些多，写伤了？呵呵，这当然是个借口。不过今天在开始动笔之前，也是磨蹭了十来分钟。有那么一种抗拒的情绪在脑海里盘旋，挥之不去。庆幸现在已经开始动笔。</p><p>昨天因为手贱，在网上面下载了一个 Disk Drill 的破解版软件，然后用它清理了电脑，结果把电脑搞残，开不了机。一边在心里面卖自己“真是不作就不会死”，一边在盘算着该怎么办。最坏的打算就是拿到维修店修，最少需要几百块。这个当然是最后选择，先看看自己能不能捯饬好。随后先用“Command + R”组合键进入到恢复模式，把用里面的镜像从新安装系统，整个过程用了三个多小时。重新开机，Finder 进不去，总卡死；之前桌面上没有任何现实，系统弹出消息说云桌面故障，打开浏览器同样各种卡顿，整个电脑几乎完全不能用，重新启动了两次同样毛病。之后索性又进入到恢复模式，利用磁盘修复工具试一试修复磁盘是否可用，仍然还是不行。当时的系统尽管finder进不去，但是点击 F4 按键可以呼出各种软件，想到用 onyx 修补修补磁盘试试，可惜系统刚升级到最新的10.13版本，macOS的整个文件系统与之前有很大不同，所以现在 onyx 不能用。最后不得已，考虑使用 Time Machine 恢复，从点按哦买回来后系统从来没有出现过大问题。如果说有，也是半个月前，也是用了一个破解版的卸载软件，把看起来各种没用的软件能卸载的差不多都卸了，导致 Mac 自带的 Python 不能正常用，还好 Aplle 发布新系统比较及时，更新之后之前的毛病消失了。而这次，真是不作就不会死的节奏，又一次用没怎么用过的软件清理不清楚该不该清理的东西，重蹈覆辙！话说回来，用 Time Machine 的备份恢复系统用了两个多小时的时间，结果似乎让人欣慰，至少Mac可以正常使用了。然后测试了下以前的 Python 问题是否还在，担忧被应验，Mac 自带的 python IDLE 不能用。想来之前从新安装电脑自己带备份恢复用镜像不能解决问题，用 Time Machine 恢复之后仍然存在一些问题，那么现在可以考虑从 App Store 重新下载一个完整版的最新系统重新安装，因为上次的这个问题就是完整升级了这个新系统解决的问题。</p><blockquote><p>在这里需要开个叉，在第一次升级系统之前，就是因为那一次手贱把系统的某些必要文件搞残，正常的升级过程却遇到困难，不能升级！在网上查了各种解决办法，中文的、英文的，都 don’t work。最后不知道脑子那里搭对了线，想着既然是了各种办法都不行，就重启一下，然后再重新下载系统，把之前的那个删掉，谢天谢地，终于可以安装。</p></blockquote><p>在晚上的时候，在用电脑干别的事情的时候顺带用 App Store 下载新的系统，计划晚上睡觉前让 Mac 慢慢装，毕竟三四个小时，耗不起。因为 Mac 用的是以前的备份做的恢复，系统上缺了很多必要的软件和配置，比如 Parallels Desktop、等等一堆，而现在这些软件的网站因为限速，现在速度很慢。就这样，又花了四五六个小时，临近睡觉，就把 Mac调入了升级模式。今天早上醒好后很庆幸，一切都看似恢复正常，之前的一直耿耿于怀的 Mac Python 问题消失不见，这应该算是一切都恢复正常的标志吧。</p><p>经过这两天的卸折腾，算是真真切切地更进一步领悟到为什么说不作就不会死的节奏，这种事情发生在自己身上时，感受尤为明显，恨不得想把自己的头撞墙。而在这之前，红远对过往的各种余人相处的场景进行过种种回顾，从高中一直到离开太原，关于做人，说实在的，红远确实很作～，打此红远觉得自己算是对不作就不会死这个东西理解的特别深了吧，而这一次，又让红远看到了“全新的世界”。之前以为理解了，就不会犯了，现在看来要完全抹灭这个劣迹有些难度。同时，不只是关于做人方面比较作～，对做事方面原来也存在作与不作。现在红远算是进一步明白了，爱作之人，必然再生活的方方面面都会作。</p><p>以前信奉一个所谓的真理：人生在于折腾。现在看来这是一个多么弱智的看似明智又叛逆的伪真理！本质上，持有这种思想的人的一个通病就是“作～”，所谓的人生在于折腾，其实就是“作～”的诠释。如果把不作就不会死换一种表达，那么就是：不折腾就不会死。</p><p>然后想到了红远他妈，还有他的研究生退学等等事情，无不体现了“作～”的痕迹。</p><p>人生珍贵，要学会智慧地生活。什么是智慧地生活？稳扎稳打。怎么样稳扎稳打？努力工作、敬畏生活，与人为善。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;人长大的两个思想转变特点：&quot;&gt;&lt;a href=&quot;#人长大的两个思想转变特点：&quot; class=&quot;headerlink&quot; title=&quot;人长大的两个思想转变特点：&quot;&gt;&lt;/a&gt;人长大的两个思想转变特点：&lt;/h4&gt;&lt;p&gt;开始把过去视之为玩具的东西作为工具来对待。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="生活体察记录" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB%E4%BD%93%E5%AF%9F%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/10/08/hello-world/"/>
    <id>http://yoursite.com/2017/10/08/hello-world/</id>
    <published>2017-10-08T00:41:55.157Z</published>
    <updated>2017-10-08T00:41:55.157Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
